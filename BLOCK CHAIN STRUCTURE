import pandas as pd
import hashlib
import time
import json
import numpy as np  # برای شناسایی مقادیر np.int64 و np.float64

# کلاس Block برای نگهداری اطلاعات هر بلاک
class Block:
    def __init__(self, index, previous_hash, timestamp, sensor_data):
        self.index = int(index)
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        # تبدیل مقادیر sensor_data به نوع‌های پایتون primitive
        self.sensor_data = {
            key: (value.item() if hasattr(value, 'item') else value)
            for key, value in sensor_data.items()
        }
        self.current_hash = self.calculate_hash()

    def calculate_hash(self):
        """محاسبه هش SHA-256 بلاک به منظور تضمین امنیت و یکپارچگی اطلاعات"""
        block_string = f"{self.index}{self.previous_hash}{self.timestamp}{json.dumps(self.sensor_data)}".encode()
        return hashlib.sha256(block_string).hexdigest()

# کلاس Blockchain برای نگهداری زنجیره بلاک‌ها
class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]

    def create_genesis_block(self):
        """ایجاد بلاک آغازین (Genesis Block) با داده‌های اولیه"""
        genesis_data = {"avg_heart_rate": 0, "glucose": 0}
        timestamp = time.time()
        return Block(0, "0", timestamp, genesis_data)

    def add_block(self, sensor_data):
        """افزودن یک بلاک جدید به زنجیره"""
        previous_block = self.chain[-1]
        index = len(self.chain)
        timestamp = time.time()
        new_block = Block(index, previous_block.current_hash, timestamp, sensor_data)
        self.chain.append(new_block)
        return new_block

    def print_chain(self):
        """چاپ اطلاعات زنجیره بلاکچین"""
        for block in self.chain:
            print(json.dumps({
                "Index": block.index,
                "Previous Hash": block.previous_hash,
                "Timestamp": block.timestamp,
                "Sensor Data": block.sensor_data,
                "Current Hash": block.current_hash
            }, indent=4))

# تابع پردازش داده‌های حسگر
def process_sensor_data(ecg_file_path, diabetes_file_path, blockchain, log_file_path):
    try:
        # بارگذاری داده‌های ECG و دیابت
        ecg_data = pd.read_csv(ecg_file_path)
        diabetes_data = pd.read_csv(diabetes_file_path)

        # تعیین تعداد ردیف‌های مشترک بین دو فایل
        total_rows = min(len(ecg_data), len(diabetes_data))
        
        # لیستی برای ذخیره اطلاعات بلاک‌ها جهت ثبت در فایل لاگ
        log_data = []

        for i in range(total_rows):
            # محاسبه میانگین ضربان قلب برای ردیف i
            # فرض بر این است که ستون‌های ECG به غیر از ستون آخر داده‌های سنسوری هستند
            avg_heart_rate = ecg_data.iloc[i, :-1].mean() * 10 + 60  # فرمول تقریبی
            # دریافت مقدار قند خون از ستون اول فایل diabetes.csv
            glucose_level = diabetes_data.iloc[i, 0]

            # ایجاد دیکشنری داده‌های حسگر برای بلاک
            sensor_data = {
                "avg_heart_rate": avg_heart_rate,
                "glucose": glucose_level
            }

            # افزودن بلاک جدید به بلاکچین با داده‌های حسگر
            block = blockchain.add_block(sensor_data)
            print(f"Added Block {block.index} with Current Hash: {block.current_hash[:8]}...")

            # ذخیره اطلاعات بلاک در لیست لاگ
            log_data.append({
                "Index": block.index,
                "Previous Hash": block.previous_hash,
                "Timestamp": block.timestamp,
                "Sensor Data": block.sensor_data,
                "Current Hash": block.current_hash
            })

        # ذخیره اطلاعات لاگ در فایل CSV
        pd.DataFrame(log_data).to_csv(log_file_path, index=False)
        print(f"\nSensor data logged to {log_file_path}")

    except FileNotFoundError as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"Error processing sensor data: {e}")

# تابع اصلی
def main():
    # مسیر فایل‌های ورودی و فایل لاگ
    ecg_file = r"D:\سارا\ترم 3 دانشگاه قم\فصل سوم و چهارم پایان نامه 1\mitbih_test.csv"
    diabetes_file = r"D:\سارا\ترم 3 دانشگاه قم\فصل سوم و چهارم پایان نامه 1\diabetes.csv"
    log_file = r"D:\سارا\ترم 3 دانشگاه قم\فصل سوم و چهارم پایان نامه 1\sensor_data_log.csv"

    # مقداردهی اولیه بلاکچین
    blockchain = Blockchain()

    # پردازش داده‌ها و افزودن به بلاکچین
    process_sensor_data(ecg_file, diabetes_file, blockchain, log_file)

    # نمایش ساختار نهایی بلاکچین
    print("\nBlockchain Structure:")
    blockchain.print_chain()

if __name__ == "__main__":
    main()
