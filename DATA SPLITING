import pandas as pd  
import hashlib  
import time  
import json  

# کلاس Block برای نگهداری اطلاعات هر بلاک  
class Block:  
    def __init__(self, index, previous_hash, timestamp, sensor_data):  
        self.index = int(index)  
        self.previous_hash = previous_hash  
        self.timestamp = timestamp  
        # در اینجا داده‌های حسگر شامل میانگین ضربان قلب و مقدار قند خون است  
        self.sensor_data = {  
            key: float(value) if isinstance(value, (int, float)) else value  
            for key, value in sensor_data.items()  
        }  
        self.current_hash = self.calculate_hash()  

    def calculate_hash(self):  
        """محاسبه هش SHA-256 بلاک برای تضمین یکپارچگی"""  
        block_string = f"{self.index}{self.previous_hash}{self.timestamp}{json.dumps(self.sensor_data)}".encode()  
        return hashlib.sha256(block_string).hexdigest()  

# کلاس Blockchain برای نگهداری زنجیره بلاک‌ها  
class Blockchain:  
    def __init__(self):  
        self.chain = [self.create_genesis_block()]  

    def create_genesis_block(self):  
        """ایجاد بلاک آغازین (Genesis Block) با داده‌های اولیه"""  
        genesis_data = {"avg_heart_rate": 0, "glucose": 0}  
        timestamp = time.time()  
        return Block(0, "0", timestamp, genesis_data)  

    def add_block(self, sensor_data):  
        """افزودن بلاک جدید به زنجیره بر اساس داده‌های ورودی"""  
        previous_block = self.chain[-1]  
        index = len(self.chain)  
        timestamp = time.time()  
        new_block = Block(index, previous_block.current_hash, timestamp, sensor_data)  
        self.chain.append(new_block)  
        return new_block  

    def print_chain(self):  
        """نمایش اطلاعات تمام بلاک‌های موجود در زنجیره"""  
        for block in self.chain:  
            print(json.dumps({  
                "Index": block.index,  
                "Previous Hash": block.previous_hash,  
                "Timestamp": block.timestamp,  
                "Sensor Data": block.sensor_data,  
                "Current Hash": block.current_hash  
            }, indent=4))  

# پردازش داده‌های حسگر: محاسبه میانگین ضربان قلب از فایل mitbih_test.csv  
# و دریافت مقدار قند خون از فایل diabetes.csv  
def process_sensor_data(ecg_file_path, glucose_file_path, blockchain, log_file_path):  
    try:  
        # بارگذاری داده‌های ECG و دیابت  
        ecg_data = pd.read_csv(ecg_file_path)  
        glucose_data = pd.read_csv(glucose_file_path)  

        # تعیین تعداد ردیف‌های مشترک (برای اطمینان از پردازش ردیف به ردیف)  
        total_rows = min(len(ecg_data), len(glucose_data))  
        
        # لیست برای ذخیره اطلاعات هر بلاک جهت ثبت در فایل لاگ  
        log_data = []  

        for i in range(total_rows):  
            # محاسبه میانگین ضربان قلب برای ردیف i:  
            # فرض بر این است که در فایل ECG، تمامی ستون‌ها به جز ستون آخر داده‌های سیگنال هستند  
            avg_heart_rate = ecg_data.iloc[i, :-1].mean() * 10 + 60  # فرمول تقریبی  
            # دریافت مقدار قند خون از ستون اول فایل دیابت (در صورت نیاز نام ستون را تغییر دهید)  
            glucose_level = glucose_data.iloc[i, 0]  
            
            # تبدیل به نوع استاندارد  
            avg_heart_rate = float(avg_heart_rate)  
            glucose_level = float(glucose_level)  

            # ایجاد داده‌های حسگر برای بلاک فعلی  
            sensor_data = {  
                "avg_heart_rate": avg_heart_rate,  
                "glucose": glucose_level  
            }  

            # افزودن بلاک جدید به بلاکچین  
            block = blockchain.add_block(sensor_data)  
            print(f"Added Block {block.index} with Current Hash: {block.current_hash[:8]}...")  

            # ذخیره اطلاعات بلاک در لیست لاگ  
            log_data.append({  
                "Index": block.index,  
                "Previous Hash": block.previous_hash,  
                "Timestamp": block.timestamp,  
                "Sensor Data": block.sensor_data,  
                "Current Hash": block.current_hash  
            })  

        # ذخیره لاگ داده‌ها در فایل sensor_data_log.csv  
        pd.DataFrame(log_data).to_csv(log_file_path, index=False)  
        print(f"\nSensor data logged to {log_file_path}")  

    except FileNotFoundError as e:  
        print(f"Error: {e}")  
    except Exception as e:  
        print(f"Error processing sensor data: {e}")  

# تابع اصلی  
def main():  
    # مسیرهای فایل‌های ورودی و فایل لاگ  
    ecg_path = r"D:\سارا\ترم 3 دانشگاه قم\فصل سوم و چهارم پایان نامه 1\mitbih_test.csv"  
    glucose_path = r"D:\سارا\ترم 3 دانشگاه قم\فصل سوم و چهارم پایان نامه 1\diabetes.csv"  
    log_file_path = r"D:\سارا\ترم 3 دانشگاه قم\فصل سوم و چهارم پایان نامه 1\sensor_data_log.csv"  

    # مقداردهی اولیه بلاکچین  
    blockchain = Blockchain()  

    # پردازش داده‌های موجود در فایل‌ها و افزودن آنها به بلاکچین  
    process_sensor_data(ecg_path, glucose_path, blockchain, log_file_path)  

    # نمایش ساختار بلاکچین  
    print("\nBlockchain Structure:")  
    blockchain.print_chain()  

if __name__ == "__main__":  
    main()  
